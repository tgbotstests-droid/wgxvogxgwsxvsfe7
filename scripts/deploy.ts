
import { ethers } from 'ethers';
import * as fs from 'fs';
import * as path from 'path';

async function main() {
  const PRIVATE_KEY = process.env.PRIVATE_KEY;
  
  if (!PRIVATE_KEY) {
    throw new Error('PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç—å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  const network = process.argv[2] || 'testnet';
  
  let provider: ethers.JsonRpcProvider;
  let poolAddressesProvider: string;
  let networkName: string;
  
  if (network === 'mainnet') {
    provider = new ethers.JsonRpcProvider('https://polygon-rpc.com');
    poolAddressesProvider = '0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb';
    networkName = 'Polygon Mainnet';
  } else {
    // Polygon Amoy Testnet
    provider = new ethers.JsonRpcProvider('https://rpc-amoy.polygon.technology');
    poolAddressesProvider = '0x5343b5bA672Ae99d627A1C87866b8E53F47Db2E6';
    networkName = 'Polygon Amoy Testnet';
  }
  
  const signer = new ethers.Wallet(PRIVATE_KEY, provider);
  
  console.log('üöÄ –î–µ–ø–ª–æ–π ArbitrageExecutor...');
  console.log('   –ö–æ—à–µ–ª–µ–∫:', signer.address);
  console.log('   –°–µ—Ç—å:', networkName);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
  const balance = await provider.getBalance(signer.address);
  console.log('   –ë–∞–ª–∞–Ω—Å:', ethers.formatEther(balance), 'MATIC');
  
  if (balance < ethers.parseEther('0.05')) {
    throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ MATIC –¥–ª—è –¥–µ–ø–ª–æ—è (–º–∏–Ω–∏–º—É–º 0.05)');
  }
  
  // –ß–∏—Ç–∞–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
  const contractPath = path.join(__dirname, '..', 'contracts', 'ArbitrageExecutor.sol');
  
  console.log('\n‚ö†Ô∏è  –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –î–ï–ü–õ–û–Æ:');
  console.log('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ contracts/ArbitrageExecutor.sol');
  console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ https://remix.ethereum.org');
  console.log('3. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª ArbitrageExecutor.sol –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥');
  console.log('4. –í–æ –≤–∫–ª–∞–¥–∫–µ "Solidity Compiler":');
  console.log('   - –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é 0.8.19');
  console.log('   - –ù–∞–∂–º–∏—Ç–µ "Compile"');
  console.log('5. –í–æ –≤–∫–ª–∞–¥–∫–µ "Deploy & Run Transactions":');
  console.log('   - Environment: Injected Provider (MetaMask)');
  console.log('   - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ MetaMask –Ω–∞', networkName);
  console.log('   - –í –ø–æ–ª–µ Constructor –≤–≤–µ–¥–∏—Ç–µ:', poolAddressesProvider);
  console.log('   - –ù–∞–∂–º–∏—Ç–µ "Deploy"');
  console.log('6. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
  console.log('7. –î–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤ Settings ‚Üí Bot Config ‚Üí Flash Loan Contract Address');
  
  console.log('\nüìã Pool Addresses Provider –¥–ª—è', networkName + ':', poolAddressesProvider);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });
