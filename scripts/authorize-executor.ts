
import { ethers } from 'ethers';

async function main() {
  // –ê–¥—Ä–µ—Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const ARBITRAGE_CONTRACT = '0x794a61358D6845594F94dc1DB02A252b5b4814aD';
  
  // –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å
  const EXECUTOR_ADDRESS = '0x3dCBc8f5de99AAD6CA1b97674C582C7bA099ef58';
  
  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  const OWNER_PRIVATE_KEY = process.env.PRIVATE_KEY;
  
  if (!OWNER_PRIVATE_KEY) {
    throw new Error('PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Polygon (–Ω–µ—Å–∫–æ–ª—å–∫–æ RPC –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
  const providers = [
    'https://polygon-rpc.com',
    'https://rpc-mainnet.matic.network',
    'https://polygon-bor-rpc.publicnode.com'
  ];
  
  let provider: ethers.JsonRpcProvider | null = null;
  
  for (const rpcUrl of providers) {
    try {
      const testProvider = new ethers.JsonRpcProvider(rpcUrl);
      await testProvider.getBlockNumber(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      provider = testProvider;
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫:', rpcUrl);
      break;
    } catch (err) {
      console.log('‚ö†Ô∏è  RPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', rpcUrl);
    }
  }
  
  if (!provider) {
    throw new Error('–í—Å–µ RPC –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
  }
  
  const signer = new ethers.Wallet(OWNER_PRIVATE_KEY, provider);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
  const balance = await provider.getBalance(signer.address);
  console.log('üí∞ –ë–∞–ª–∞–Ω—Å owner:', ethers.formatEther(balance), 'MATIC');
  
  if (balance < ethers.parseEther('0.01')) {
    throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ MATIC –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–∞–∑–∞ (–º–∏–Ω–∏–º—É–º 0.01 MATIC)');
  }
  
  // ABI –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ addExecutor
  const contractABI = [
    'function addExecutor(address executor) external',
    'function approvedExecutors(address) external view returns (bool)',
    'function owner() external view returns (address)'
  ];
  
  const contract = new ethers.Contract(ARBITRAGE_CONTRACT, contractABI, signer);
  
  console.log('\nüîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è...');
  console.log('   –ö–æ–Ω—Ç—Ä–∞–∫—Ç:', ARBITRAGE_CONTRACT);
  console.log('   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:', EXECUTOR_ADDRESS);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º owner –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  let contractOwner: string;
  try {
    contractOwner = await contract.owner();
    console.log('   Owner –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', contractOwner);
    console.log('   –í–∞—à –∞–¥—Ä–µ—Å:', signer.address);
  } catch (err) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å owner –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã owner
  if (contractOwner.toLowerCase() !== signer.address.toLowerCase()) {
    throw new Error(`–í—ã –Ω–µ owner –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞! Owner: ${contractOwner}, –í—ã: ${signer.address}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
  const isApproved = await contract.approvedExecutors(EXECUTOR_ADDRESS);
  
  if (isApproved) {
    console.log('\n‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!');
    return;
  }
  
  console.log('\nüìù –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
  
  // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
  const tx = await contract.addExecutor(EXECUTOR_ADDRESS, {
    gasLimit: 100000 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –≥–∞–∑–∞
  });
  
  console.log('üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', tx.hash);
  console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
  
  const receipt = await tx.wait();
  console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫–µ:', receipt?.blockNumber);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const isNowApproved = await contract.approvedExecutors(EXECUTOR_ADDRESS);
  
  if (isNowApproved) {
    console.log('\nüéâ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!');
    console.log('   –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏');
  } else {
    console.log('\n‚ö†Ô∏è  –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  });
