import { useEffect, useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Skeleton } from "@/components/ui/skeleton";
import { Button } from "@/components/ui/button";
import { 
  AlertTriangle, 
  AlertCircle, 
  Info, 
  CheckCircle2,
  ChevronDown,
  ChevronRight,
  XCircle,
  Lightbulb
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";

interface ActivityLog {
  id: number;
  userId: string;
  type: string;
  level: string;
  message: string;
  metadata?: any;
  createdAt: string;
}

export function ErrorLogsDetailed() {
  const [expandedLogs, setExpandedLogs] = useState<Set<number>>(new Set());

  const { data: logs, isLoading } = useQuery<ActivityLog[]>({
    queryKey: ["/api/activity-logs"],
    queryFn: async () => {
      const response = await fetch("/api/activity-logs?limit=200");
      if (!response.ok) throw new Error("Failed to fetch activity logs");
      return response.json();
    },
    refetchInterval: 10000,
  });

  // Filter for errors and warnings only
  const errorLogs = logs?.filter(l => l.level === 'error' || l.level === 'warning') || [];
  const criticalErrors = errorLogs.filter(l => l.level === 'error');
  const warnings = errorLogs.filter(l => l.level === 'warning');

  const toggleExpanded = (logId: number) => {
    const newExpanded = new Set(expandedLogs);
    if (newExpanded.has(logId)) {
      newExpanded.delete(logId);
    } else {
      newExpanded.add(logId);
    }
    setExpandedLogs(newExpanded);
  };

  const getLevelIcon = (level: string) => {
    switch (level) {
      case 'error':
        return <XCircle className="h-5 w-5 text-red-600 dark:text-red-400" />;
      case 'warning':
        return <AlertTriangle className="h-5 w-5 text-yellow-600 dark:text-yellow-400" />;
      default:
        return <Info className="h-5 w-5 text-blue-600 dark:text-blue-400" />;
    }
  };

  const getLevelBadge = (level: string) => {
    switch (level) {
      case 'error':
        return <Badge variant="destructive" className="font-mono text-xs">–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø</Badge>;
      case 'warning':
        return <Badge variant="secondary" className="font-mono text-xs bg-yellow-500/20 text-yellow-700 dark:text-yellow-400">–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï</Badge>;
      default:
        return <Badge variant="outline" className="font-mono text-xs">–ò–ù–§–û</Badge>;
    }
  };

  const getErrorDescription = (log: ActivityLog): string => {
    const metadata = log.metadata;
    
    // Analyze metadata to provide helpful description
    if (metadata?.error === 'private_key_not_configured') {
      return '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏. –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.';
    }
    
    if (metadata?.step === '4_gas_too_high') {
      return '–¶–µ–Ω–∞ –≥–∞–∑–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞–∫—Å–∏–º—É–º. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ–π.';
    }
    
    if (metadata?.step === '3_balance_check_failed' || log.message.includes('MATIC')) {
      return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ MATIC –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–∞–∑–∞. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫.';
    }
    
    if (log.message.includes('Telegram') || log.type === 'telegram') {
      return '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram –±–æ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ Chat ID.';
    }
    
    if (log.message.includes('API') || log.message.includes('1inch')) {
      return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –≤–Ω–µ—à–Ω–µ–º—É API. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.';
    }
    
    // Default description
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.';
  };

  const getRecommendation = (log: ActivityLog): string => {
    const metadata = log.metadata;
    
    if (metadata?.recommendation) {
      return metadata.recommendation;
    }
    
    if (metadata?.error === 'private_key_not_configured') {
      return '–î–æ–±–∞–≤—å—Ç–µ PRIVATE_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Secrets) –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤ Settings ‚Üí Safe & Ledger';
    }
    
    if (metadata?.step === '4_gas_too_high') {
      return `–î–æ–∂–¥–∏—Ç–µ—Å—å —Å–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –≥–∞–∑–∞ –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç maxGasPriceGwei –≤ Settings (—Ç–µ–∫—É—â–∏–π: ${metadata.maxGasGwei} Gwei)`;
    }
    
    if (log.message.includes('MATIC') || metadata?.step === '3_balance_check_failed') {
      return '–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ MATIC —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π';
    }
    
    if (log.message.includes('Telegram')) {
      return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ Settings ‚Üí Telegram. –î–ª—è –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π Chat ID.';
    }
    
    return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.';
  };

  if (isLoading) {
    return (
      <Card data-testid="card-error-logs">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <AlertTriangle className="h-5 w-5" />
            –î–µ—Ç–∞–ª—å–Ω—ã–µ –õ–æ–≥–∏ –û—à–∏–±–æ–∫
          </CardTitle>
          <CardDescription>–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏</CardDescription>
        </CardHeader>
        <CardContent>
          <Skeleton className="h-96 w-full" />
        </CardContent>
      </Card>
    );
  }

  return (
    <Card data-testid="card-error-logs">
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="flex items-center gap-2">
              <AlertTriangle className="h-5 w-5" />
              –î–µ—Ç–∞–ª—å–Ω—ã–µ –õ–æ–≥–∏ –û—à–∏–±–æ–∫
            </CardTitle>
            <CardDescription>–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–∏ —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ –∏ —Ä–µ—à–µ–Ω–∏—è–º–∏</CardDescription>
          </div>
          <div className="flex gap-2">
            <Badge variant="destructive" data-testid="badge-critical-errors">
              <XCircle className="h-3 w-3 mr-1" />
              {criticalErrors.length} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö
            </Badge>
            <Badge variant="secondary" className="bg-yellow-500/20" data-testid="badge-warnings">
              <AlertTriangle className="h-3 w-3 mr-1" />
              {warnings.length} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            </Badge>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        {errorLogs.length === 0 ? (
          <div className="text-center py-12">
            <CheckCircle2 className="h-16 w-16 mx-auto mb-4 text-green-500/50" />
            <p className="text-lg font-medium">–û—à–∏–±–æ–∫ –Ω–µ—Ç! üéâ</p>
            <p className="text-sm text-muted-foreground mt-1">
              –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø—Ä–æ–±–ª–µ–º
            </p>
          </div>
        ) : (
          <ScrollArea className="h-[600px] pr-4">
            <div className="space-y-3">
              {errorLogs.map((log) => {
                const isExpanded = expandedLogs.has(log.id);
                const description = getErrorDescription(log);
                const recommendation = getRecommendation(log);
                
                return (
                  <Collapsible 
                    key={log.id} 
                    open={isExpanded} 
                    onOpenChange={() => toggleExpanded(log.id)}
                    className="border rounded-lg"
                  >
                    <div className={cn(
                      "p-4",
                      log.level === 'error' ? 'bg-red-500/5 border-red-500/20' : 'bg-yellow-500/5 border-yellow-500/20'
                    )}>
                      <div className="flex items-start gap-3">
                        <div className="flex-shrink-0 mt-0.5">
                          {getLevelIcon(log.level)}
                        </div>
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2 mb-2">
                            {getLevelBadge(log.level)}
                            <span className="text-xs text-muted-foreground font-mono">
                              {new Date(log.createdAt).toLocaleString('ru-RU', {
                                day: '2-digit',
                                month: '2-digit',
                                hour: '2-digit',
                                minute: '2-digit',
                                second: '2-digit'
                              })}
                            </span>
                          </div>
                          <p className="font-medium text-sm mb-1">{log.message}</p>
                          <p className="text-sm text-muted-foreground mb-3">{description}</p>
                          
                          <CollapsibleTrigger asChild>
                            <Button variant="ghost" size="sm" className="h-8 gap-2">
                              {isExpanded ? (
                                <>
                                  <ChevronDown className="h-4 w-4" />
                                  –°–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏
                                </>
                              ) : (
                                <>
                                  <ChevronRight className="h-4 w-4" />
                                  –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ —Ä–µ—à–µ–Ω–∏–µ
                                </>
                              )}
                            </Button>
                          </CollapsibleTrigger>
                          
                          <CollapsibleContent className="mt-3 space-y-3">
                            <div className="bg-blue-500/10 border border-blue-500/20 rounded-md p-3">
                              <div className="flex items-start gap-2">
                                <Lightbulb className="h-4 w-4 text-blue-500 flex-shrink-0 mt-0.5" />
                                <div>
                                  <p className="text-sm font-medium text-blue-700 dark:text-blue-400 mb-1">
                                    –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                                  </p>
                                  <p className="text-sm text-blue-600 dark:text-blue-300">
                                    {recommendation}
                                  </p>
                                </div>
                              </div>
                            </div>
                            
                            {log.metadata && Object.keys(log.metadata).length > 0 && (
                              <div className="bg-muted/50 rounded-md p-3">
                                <p className="text-xs font-medium text-muted-foreground mb-2">
                                  –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:
                                </p>
                                <pre className="text-xs font-mono overflow-x-auto">
                                  {JSON.stringify(log.metadata, null, 2)}
                                </pre>
                              </div>
                            )}
                            
                            <div className="text-xs text-muted-foreground">
                              <span className="font-medium">–¢–∏–ø:</span> {log.type} ‚Ä¢ 
                              <span className="font-medium ml-2">ID:</span> {log.id}
                            </div>
                          </CollapsibleContent>
                        </div>
                      </div>
                    </div>
                  </Collapsible>
                );
              })}
            </div>
          </ScrollArea>
        )}
      </CardContent>
    </Card>
  );
}
